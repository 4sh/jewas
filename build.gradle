apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def timestamp = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
// For cobertura
def cobSerFile = "${project.buildDir}/reports/tests/cobertura.ser"
def srcOriginal = "${sourceSets.main.classesDir}"
def srcCopy = "${srcOriginal}-copy"
// System property to activate test coverage during test execution
// (de-activated by default)
def COVERAGE_SYS_PROPERTY = "test.coverage.activated"
// Set this to false to generate a war file
// TODO: implement the war file related build ?
// Useless property (for the moment...)
def STANDALONE_PACKAGING = true
// Root directory on demo environment, where will be hosted every targetEnvironment directories
def ENV_DEMO_DEPLOY_ROOT_PATH = "/home/bbeeg/dist";
// Demo connection properties
def ENV_DEMO_HOST = '192.168.0.200'
def ENV_DEMO_USER = "bbeeg"
def ENV_DEMO_PASS = "4SHbbfr"

/*
 * System property used to define target execution environment used for deployment
 * See ENV_PROPERTIES map for the possible values to set in this system property
 */
def TARGET_ENV_SYS_PROPERTY = "deploy.target.env"

// System property used to skip upload of artefact during start* tasks
def SKIP_UPLOAD_SYS_PROPERTY = "deploy.skip.upload"

// System property used to define an XDebug java port to launch remote app in debug mode
def DEBUG_PORT_SYS_PROPERTY = "deploy.debug.port"

if(!hasProperty("releasesRepoUsername")
        || !hasProperty("releasesRepoPassword")){
    ant.fail "You should define a ~/.gradle/gradle.properties containing properties 'releasesRepoUsername' and 'releasesRepoPassword' to access 4SH releases repository !"
}

def ENV_PROPERTIES = [
        test: [
                rootEnvDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/test",
                contentFileRepository: ENV_DEMO_DEPLOY_ROOT_PATH + "/test/data/contents/",
                tmpContentFileRepository: ENV_DEMO_DEPLOY_ROOT_PATH + "/test/data/tmpContents/",
                cachedStaticResourcesRootDirectory: ENV_DEMO_DEPLOY_ROOT_PATH + "/test/apps/bbeeg/bbeeg_cachedStaticResources",
                logDirectory: ENV_DEMO_DEPLOY_ROOT_PATH + "/test/log",
                videoEncodingInput: ENV_DEMO_DEPLOY_ROOT_PATH + "/test/apps/videoConverter/in",
                videoEncodingOutput: ENV_DEMO_DEPLOY_ROOT_PATH + "/test/apps/videoConverter/out",
                dbmaintainDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/test/dbmaintain/",
                databaseSchema: "bbeeg_test",
                visioEegRootUrl: "http://test.visio.bbeeg.4sh.fr",
                visioEegInternalUrl: "http://127.0.0.1:18087",
                elasticSearchAdress: "127.0.0.1",
                elasticSearchPort: 19200,
                bbeegPort: 18086,
                specificJavaOpts: "-Xmx256m"
        ],
        qa: [
                rootEnvDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa",
                contentFileRepository: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/data/contents/",
                tmpContentFileRepository: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/data/tmpContents/",
                cachedStaticResourcesRootDirectory: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/apps/bbeeg/bbeeg_cachedStaticResources",
                logDirectory: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/log",
                videoEncodingInput: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/apps/videoConverter/in",
                videoEncodingOutput: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/apps/videoConverter/out",
                dbmaintainDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/dbmaintain/",
                databaseSchema: "bbeeg_qa",
                visioEegRootUrl: "http://qa.visio.bbeeg.4sh.fr",
                visioEegInternalUrl: "http://127.0.0.1:28087",
                elasticSearchAdress: "127.0.0.1",
                elasticSearchPort: 29200,
                bbeegPort: 28086,
                specificJavaOpts: "-Xmx512m"
        ]
]

group = "fr.4sh.bbeeg"
def versionBase = "1.1.beta"

// handles releases gracefully
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(':release')) {
        version = versionBase
        versionForManifest = version
    } else {
        version = versionBase + '-SNAPSHOT'
        versionForManifest = versionBase + "-" + timestamp
    }
    jar {
        manifest {
            attributes 'Main-Class': 'fr.fsh.bbeeg.Main'
            attributes 'Implementation-Title': 'BB-EEG'
            attributes 'Implementation-Version': versionForManifest
            attributes 'Implementation-Vendor': '4SH France'
        }
    }
}

/**
 * Manage 4SH repositories connection.
 */
repositories {
    maven {
        credentials {
            username releasesRepoUsername
            password releasesRepoPassword
        }
        url "http://repo.4sh.fr/libs/"
        artifactUrls "http://repo.4sh.fr/libs/"
    }
}

configurations {
    intTestCompile { extendsFrom testCompile }
    intTestRuntime { extendsFrom intTestCompile, runtime }
    ssh
}

/*
 * Dependencies management.
 */
dependencies {
    compile(
            [group: 'mysql', name: 'mysql-connector-java', version: '5.1.18'],
            [group: 'org.slf4j', name: 'slf4j-api', version: '1.6.4'],
            [group: 'fr.4sh.jewas', name: 'jewas', version: '0.1-SNAPSHOT', transitive: true],
            [group: 'com.beust', name: 'jcommander', version: '1.17', transitive: true],
            [group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'],
            [group: 'org.elasticsearch', name: 'elasticsearch', version: '0.17.6'],
            [group: 'org.elasticsearch', name: 'elasticsearch-mapper-attachments', version: '0.17.6'],
            [group: 'com.jayway.restassured', name: 'rest-assured', version: '1.3']
    )
    runtime(
            [group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.0'],
            [group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.6.4']
    )

    testCompile(
            [group: 'com.h2database', name: 'h2', version: '1.3.158'],
            [group: 'junit', name: 'junit', version: '4.8.2', transitive: true],
            [group: 'org.dbunit', name: 'dbunit', version: '2.4.8']
    )
    testRuntime('net.sourceforge.cobertura:cobertura:1.9.4.1') {
        exclude module: 'log4j'
    }
    ssh 'org.apache.ant:ant-jsch:1.7.0'
}

sourceSets {
    intTest {
        compileClasspath = sourceSets.main.classes + configurations.intTestCompile
        runtimeClasspath = classes + sourceSets.main.classes + configurations.intTestRuntime
        java {
            srcDir "src/integration-test/java"
        }
        resources {
            srcDir "src/integration-test/resources"
        }
    }
    // Warning: this configuration is due to gradle way the manifest.mf is accessed in Java.
    // When tests are run with gradle, the manifest.mf is not copied with the classes which leads to 'FileNotFoundException'
    main {
        output.resourcesDir = sourceSets.main.output.classesDir
    }
}

/* Allows to generate USER_HOME idea variable which helps to have same idea.iml file on every OS */
ideaModule {
    variables.put("USER_HOME", file(System.getProperty("user.home")))
}

if(STANDALONE_PACKAGING){
    jar {
      // Convert every jars in a fatjar
      from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }

    sourceSets{
        main {
            resources {
                srcDir "src/main/java"
                srcDir "src/main/webapp"
            }
        }
    }
}

/* Check that the TARGET_ENV_SYS_PROPERTY is correctly defined */
task checkPropsForDeployment << {
    if (System.properties[TARGET_ENV_SYS_PROPERTY] == null
            || !ENV_PROPERTIES.containsKey(System.properties[TARGET_ENV_SYS_PROPERTY])) {
        throw new IllegalArgumentException("You should define <" + TARGET_ENV_SYS_PROPERTY + "> system property !")
    }
}

task initSsh << {
    ant.taskdef(name: 'scp2',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
    	classpath: configurations.ssh.asPath)
    ant.taskdef(name: 'ssh',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
    	classpath: configurations.ssh.asPath)
}

task uploadOnDemo(dependsOn: [initSsh, checkPropsForDeployment, test, build]) << {
    if(!"true".equals(System.properties[SKIP_UPLOAD_SYS_PROPERTY])){

        def deployDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].rootEnvDir + "/apps/bbeeg"

        println "Deploying BB-EEG to $deployDirectory"

        def libFiles = file(libsDir).listFiles().findAll { it =~ "\\.jar\$" }
        libFiles.each { File f ->
            println "Uploading ${f.name} (${f.size()/1000000} Mo) ..."

            ant.scp2(file: f,
                    remoteTofile: "${ENV_DEMO_USER}:${ENV_DEMO_PASS}@${ENV_DEMO_HOST}:${deployDirectory}/bbeeg.jar",
                    port: 22,
                    trust: true,
                    verbose: true
            )
        }
    } else {
        println "Upload of BB-EEG skipped !"
    }
}

task bootstrapElasticSearch() << {
    def deployDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].rootEnvDir

    // Installing needed plugins
    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
		command: """${deployDirectory}/elasticsearch/bin/plugin \
		     install mapper-attachments""",
        trust: true, failonerror: true)
}

task startElasticSearch(dependsOn: [initSsh, checkPropsForDeployment]) << {
    def deployDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].rootEnvDir + "/apps/elasticsearch";
    def executionPort = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].elasticSearchPort;
    def logDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].logDirectory;

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
            command: """kill -9 \$(cat "${deployDirectory}/elasticsearch.pid")""", trust: true, failonerror: false)

    // Waiting 5s after kill of elastic search
    Object.sleep(5000)

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
            command: """mv ${deployDirectory}/elasticsearch/data ${deployDirectory}/elasticsearch/data-${timestamp}""", trust: true, failonerror: false)

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
            command: """${deployDirectory}/elasticsearch/bin/elasticsearch \
		    -f -Des.transport.tcp.port=${executionPort} -Des.index.store.type=memory -Xms512m -Xmx512m  \
		    > "${logDirectory}/elasticsearch.log" 2> "${logDirectory}/elasticsearch.err.log" \
		    & echo \$! > "${deployDirectory}/elasticsearch.pid" """,
            trust: true, failonerror: true)

    // Waiting 5s after start of elastic search
    Object.sleep(5000)
}

task startBBEEG(dependsOn: [initSsh, checkPropsForDeployment, startElasticSearch]) << {
    def targetEnv = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]]
    def deployDirectory = targetEnv.rootEnvDir + "/apps/bbeeg"
    def executionPort = targetEnv.bbeegPort
    def visioRootUrl = targetEnv.visioEegRootUrl
    def visioEegInternalUrl = targetEnv.visioEegInternalUrl
    def contentFileRepository = targetEnv.contentFileRepository
    def videoEncodingInput = targetEnv.videoEncodingInput
    def videoEncodingOutput = targetEnv.videoEncodingOutput
    def tmpContentFileRepository = targetEnv.tmpContentFileRepository
    def elasticSearchPort = targetEnv.elasticSearchPort
    def elasticSearchAdress = targetEnv.elasticSearchAdress
    def cachedStaticResourcesRootDirectory = targetEnv.cachedStaticResourcesRootDirectory
    def specificJavaOpts = targetEnv.specificJavaOpts
    def java7Home = "/usr/lib/jvm/jdk1.7.0_01/"
    def javaOpts = "-Xms256m -Dfile.encoding=UTF-8 ${specificJavaOpts} "
    def databaseSchema = targetEnv.databaseSchema;
    def logDirectory = targetEnv.logDirectory;

    if(System.properties[DEBUG_PORT_SYS_PROPERTY] != null
        && !"".equals(System.properties[DEBUG_PORT_SYS_PROPERTY])){
        javaOpts += " -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address="+System.properties[DEBUG_PORT_SYS_PROPERTY]+" -Xnoagent -Djava.compiler=NONE"
    }

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
		command: """kill -9 \$(cat "${deployDirectory}/bbeeg.pid")""", trust: true, failonerror: false)
    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
		command: """rm -rf ${cachedStaticResourcesRootDirectory}""", trust: true, failonerror: false)
    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
		command: """mkdir ${cachedStaticResourcesRootDirectory}""", trust: true, failonerror: true)
    // TODO: pass the http port here...
    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
		command: """${java7Home}/jre/bin/java ${javaOpts} -jar "${deployDirectory}/bbeeg.jar" \
		    -httpPort ${executionPort} \
		    -visioRootUrl ${visioRootUrl} \
		    -visioEegInternalUrl ${visioEegInternalUrl} \
		    -databaseSchema ${databaseSchema} \
		    -contentFileRepository ${contentFileRepository} \
		    -tmpContentFileRepository ${tmpContentFileRepository} \
		    -cachedStaticResourcesRootDirectory ${cachedStaticResourcesRootDirectory} \
		    -elasticSearchAdress ${elasticSearchAdress} \
		    -elasticSearchPort ${elasticSearchPort} \
		    -videoEncodingInput ${videoEncodingInput} \
            -videoEncodingOutput ${videoEncodingOutput} \
		    > "${logDirectory}/bbeeg.log" 2> "${logDirectory}/bbeeg.err.log" \
		    & echo \$! > "${deployDirectory}/bbeeg.pid" """,
        trust: true, failonerror: true)
}

task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
}

task initializeIntTestContext << {
    ant.echo "TODO: unzip & start elastic search here !"
}
intTestClasses.dependsOn initializeIntTestContext

task packageDBMaintainScripts(type: Zip) {
    from 'src/main/resources/database/incremental/'
    baseName = 'incremental'
    version = ''
    destinationDir = file("src/main/resources/database/")
}

task uploadDbMaintainScripts(dependsOn: [initSsh, packageDBMaintainScripts]) << {
    def dbmaintainDir = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].dbmaintainDir;
    println "Deploying dbmaintain scripts to $dbmaintainDir";

    File f = file("src/main/resources/database/incremental.zip");
    println f.name
    ant.scp2(file: f,
            remoteTofile: "${ENV_DEMO_USER}:${ENV_DEMO_PASS}@${ENV_DEMO_HOST}:${dbmaintainDir}" + f.name,
            port: 22,
            trust: true,
            verbose: true);

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
            command: "rm -rf ${dbmaintainDir}/${f.name}",
            trust: true,
            failonerror: true)

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 22,
            command: "unzip ${dbmaintainDir}/${f.name}",
            trust: true,
            failonerror: true)
}

// For cobertura ...
if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY))) {
    gradle.taskGraph.beforeTask { task ->
        if (task == test) {
            ant {
                // delete data file for cobertura, otherwise coverage would be added
                delete(file: cobSerFile, failonerror: false)
                // delete copy of original classes
                delete(dir: srcCopy, failonerror: false)
                // import cobertura task, so it is available in the script
                taskdef(resource: 'tasks.properties', classpath: configurations.testRuntime.asPath)
                // create copy (backup) of original class files
                copy(todir: srcCopy) {
                    fileset(dir: srcOriginal)
                }
                // instrument the relevant classes in-place
                'cobertura-instrument'(datafile: cobSerFile) {
                    fileset(dir: srcOriginal,
                            includes: "**/*.class")
                }
            }
        }
    }

    gradle.taskGraph.afterTask { task ->
        if (task == test && new File(srcCopy).exists()) {
            // replace instrumented classes with backup copy again
            ant {
                delete(file: srcOriginal)
                move(file: srcCopy,
                        tofile: srcOriginal)
            }
            // create cobertura reports
            ant.'cobertura-report'(destdir: "${project.buildDirName}/reports/tests/",
                    format: 'xml', srcdir: "src/main/java", datafile: cobSerFile)
        }
    }

    test {
        ignoreFailures = true
        systemProperties["net.sourceforge.cobertura.datafile"] = cobSerFile
    }
}