apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'sonar'
apply plugin: 'maven'

// For cobertura
def cobSerFile = "${project.buildDir}/reports/tests/cobertura.ser"
def srcOriginal = "${sourceSets.main.classesDir}"
def srcCopy = "${srcOriginal}-copy"
def COVERAGE_SYS_PROPERTY = "test.coverage.activated"

if(!hasProperty("releasesRepoUsername")
        || !hasProperty("releasesRepoPassword")){
    ant.fail "You should define a ~/.gradle/gradle.properties containing properties 'releasesRepoUsername' and 'releasesRepoPassword' to access 4SH releases repository !"
}

org.apache.ivy.util.url.CredentialsStore.INSTANCE.addCredentials("Artifactory Realm", "repo.4sh.fr", releasesRepoUsername, releasesRepoPassword);

group = "fr.4sh.jewas"
def versionBase = '0.1'

sourceCompatibility = 1.6
targetCompatibility = 1.6

if(System.getProperty("jdk") != null){
    sourceCompatibility = System.getProperty("jdk")
    targetCompatibility = System.getProperty("jdk")
}

// handles releases gracefully
gradle.taskGraph.whenReady {taskGraph ->
   if (taskGraph.hasTask(':release')) {
      version = versionBase
   } else {
      version = versionBase + '-SNAPSHOT'
   }
}

configurations {
   deployerJars
}

repositories {
    mavenRepo urls: ["http://repo.4sh.fr/libs-release/"]
    // for rest assured snapshot
    mavenRepo urls: ["http://oss.sonatype.org/content/repositories/snapshots/"]

}

dependencies {
    compile(
            [group: "freemarker", name: 'freemarker', version: '2.3.9', transitive: true],
            [group: 'com.google.code.gson', name: 'gson', version: '1.7.1', transitive: true],
            [group: 'joda-time', name: 'joda-time', version: '1.6.2', transitive: true],
            [group: "org.jboss.netty", name: 'netty', version: '4.0.0.Alpha0-4sh', transitive: true],
            [group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1', transitive: true]
    )
    testCompile(
            [group: 'junit', name: 'junit', version: '4.8.2', transitive: true],
            [group: 'com.jayway.restassured', name: 'rest-assured', version: '1.3'],
            [group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'],
            [group: 'commons-io', name: 'commons-io', version: '1.4'],
            [group: 'com.h2database', name: 'h2', version: '1.3.158'],
            // For multipart file upload
            //[group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.0.3']
    )
    testRuntime 'net.sourceforge.cobertura:cobertura:1.9.4.1'
    // to use WebDav protocol on upload
    deployerJars "org.apache.maven.wagon:wagon-webdav-jackrabbit:1.0"
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
   from javadoc.destinationDir
   classifier = 'javadoc'
}

task packageSources(type: Jar) {
   from sourceSets.main.allSource
   classifier = 'sources'
}
artifacts {
   archives(packageJavadoc) {
      type = 'javadoc'
      extension = 'jar'
   }
   archives(packageSources)
}

uploadArchives {
   repositories {
      deployer = mavenDeployer {
        // you might use this configuration not to generate
        // date based artefact names
        // uniqueVersion = false
        configureAuth = {
           authentication(userName: releasesRepoUsername, password: releasesRepoPassword)
        }
        configuration = configurations.deployerJars
        snapshotRepository(url: "dav:http://repo.4sh.fr/libs-snapshot-local", configureAuth)
        repository(url: "dav:http://repo.4sh.fr/libs-release-local/", configureAuth)
      }
   }
}

// Allows to generate USER_HOME idea variable uniformely on every OS
ideaModule {
    variables.put("USER_HOME", file(System.getProperty("user.home")))
}

// For cobertura ...
if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY))) {
    gradle.taskGraph.beforeTask { task ->
        if (task == test) {
            ant {
                // delete data file for cobertura, otherwise coverage would be added
                delete(file: cobSerFile, failonerror: false)
                // delete copy of original classes
                delete(dir: srcCopy, failonerror: false)
                // import cobertura task, so it is available in the script
                taskdef(resource: 'tasks.properties', classpath: configurations.testRuntime.asPath)
                // create copy (backup) of original class files
                copy(todir: srcCopy) {
                    fileset(dir: srcOriginal)
                }
                // instrument the relevant classes in-place
                'cobertura-instrument'(datafile: cobSerFile) {
                    fileset(dir: srcOriginal,
                            includes: "**/*.class")
                }
            }
        }
    }

    gradle.taskGraph.afterTask { task ->
        if (task == test && new File(srcCopy).exists()) {
            // replace instrumented classes with backup copy again
            ant {
                delete(file: srcOriginal)
                move(file: srcCopy,
                        tofile: srcOriginal)
            }
            // create cobertura reports
            ant.'cobertura-report'(destdir: "${project.buildDirName}/reports/tests/",
                    format: 'xml', srcdir: "src/main/java", datafile: cobSerFile)
        }
    }

    test {
        ignoreFailures = true
        systemProperties["net.sourceforge.cobertura.datafile"] = cobSerFile
    }
}

sonar {
    serverUrl = "http://sonar.4sh.fr"

    globalProperty "sonar.jdbc.url", "jdbc:mysql://sonar:3306/sonar"
    globalProperty "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    globalProperty "sonar.jdbc.username", "sonar"
    globalProperty "sonar.jdbc.password", "4SHsoar"

    globalProperty "sonar.java.source", "1.6"
    globalProperty "sonar.java.target", "1.6"
}
