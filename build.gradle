apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'sonar'
apply plugin: 'maven'

def timestamp = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
// For cobertura
def cobSerFile = "${project.buildDir}/reports/tests/cobertura.ser"
def srcOriginal = "${sourceSets.main.classesDir}"
def srcCopy = "${srcOriginal}-copy"
// System property to activate test coverage during test execution
// (de-activated by default)
def COVERAGE_SYS_PROPERTY = "test.coverage.activated"
// Set this to false to generate a war file
// TODO: implement the war file related build ?
// Useless property (for the moment...)
def STANDALONE_PACKAGING = true
// Root directory on demo environnment, where will be hosted every targetEnvironnment directories
def ENV_DEMO_DEPLOY_ROOT_PATH = "/home/bbeeg/dist";
// Demo connection properties
def ENV_DEMO_HOST = '91.121.39.83'
def ENV_DEMO_USER = "bbeeg"
def ENV_DEMO_PASS = "4SHbbfr"
// System property used to define target execution environnment used for deployment
// See ENV_PROPERTIES map for the possible values to set in this system property
def TARGET_ENV_SYS_PROPERTY = "deploy.target.env"

def ENV_PROPERTIES = [
   nightly: [
           targetDir: ENV_DEMO_DEPLOY_ROOT_PATH+"/nightly",
           bbeegPort: 18086,
           visioEegRootUrl: "http://nightly.visio.bbeeg.4sh.fr",
           contentFileRepository: ENV_DEMO_DEPLOY_ROOT_PATH+"/nightly"+"/contents"
   ], qa: [
           targetDir: ENV_DEMO_DEPLOY_ROOT_PATH+"/qa",
           bbeegPort: 28086,
           visioEegRootUrl: "http://qa.visio.bbeeg.4sh.fr",
           contentFileRepository: ENV_DEMO_DEPLOY_ROOT_PATH+"/qa"+"/contents"
   ]
]

group = "fr.4sh.bbeeg"
version = "0.1-SNAPSHOT"

// TODO: when releasing a version, do stuff here ...

// Finally, if we are in a snapshot version, replace snapshot with timestamp
if(version.contains("-SNAPSHOT")){
    def unsnapshotedVersion = version.substring(0, version.length() - "-SNAPSHOT".length());
    version = unsnapshotedVersion+"-"+timestamp;
}


repositories {
    mavenLocal()
    mavenCentral()
    mavenRepo urls: "http://oss.sonatype.org/content/repositories/releases/"
}

configurations {
    intTestCompile { extendsFrom testCompile }
    intTestRuntime { extendsFrom intTestCompile, runtime }
    ssh
}

dependencies {
    compile(
            [group: 'com.h2database', name: 'h2', version: '1.3.158'],
            [group: 'fr.4sh.jewas', name: 'jewas', version: '0.1-SNAPSHOT', transitive: true],
            [group: 'com.beust', name:'jcommander', version: '1.17', transitive: true],
            [group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4']
    )
    testCompile(
            [group: 'junit', name: 'junit', version: '4.8.2', transitive: true],
            [group: 'com.jayway.restassured', name: 'rest-assured', version: '1.2.1'],
            [group: 'org.elasticsearch', name: 'elasticsearch', version: '0.17.4']
    )
    testRuntime 'net.sourceforge.cobertura:cobertura:1.9.4.1'
    ssh 'org.apache.ant:ant-jsch:1.7.0'
}

sourceSets {
    intTest {
        compileClasspath = sourceSets.main.classes + configurations.intTestCompile
        runtimeClasspath = classes + sourceSets.main.classes + configurations.intTestRuntime
        java {
            srcDir "src/integration-test/java"
        }
        resources {
            srcDir "src/integration-test/resources"
        }
    }
}

jar {
  manifest {
    attributes 'Main-Class': 'fr.fsh.bbeeg.Main'
    attributes 'Implementation-Title': 'BB-EEG'
    attributes 'Implementation-Version': version
    attributes 'Implementation-Vendor': '4SH France'
  }
}

if(STANDALONE_PACKAGING){
    jar {
      // Convert every jars in a fatjar
      from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }

    sourceSets{
        main {
            resources {
                srcDir "src/main/java"
                srcDir "src/main/webapp"
            }
        }
    }
}

task checkPropsForDeployment << {
    if(System.properties[TARGET_ENV_SYS_PROPERTY] == null
            || !ENV_PROPERTIES.containsKey(System.properties[TARGET_ENV_SYS_PROPERTY])){
        throw new IllegalArgumentException("You should define <"+TARGET_ENV_SYS_PROPERTY+"> system property !")
    }
}

task initSsh << {
    ant.taskdef(name: 'scp2',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
    	classpath: configurations.ssh.asPath)
    ant.taskdef(name: 'ssh',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
    	classpath: configurations.ssh.asPath)
}

task uploadOnDemo(dependsOn: [initSsh, checkPropsForDeployment, test, build]) << {
    def deployDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].targetDir

	println "Deploying BB-EEG to $deployDirectory"

    def libFiles = file(libsDir).listFiles().findAll { it =~ "\\.jar\$" }
    libFiles.each { File f ->
        println "Uploading ${f.name} (${f.size()/1000000} Mo) ..."

        ant.scp2(file: f,
                remoteTofile: "${ENV_DEMO_USER}:${ENV_DEMO_PASS}@${ENV_DEMO_HOST}:${deployDirectory}/bbeeg.jar",
                port: 2224,
                trust: true,
                verbose: true
        )
    }
}

task startBBEEG(dependsOn: [initSsh, checkPropsForDeployment]) << {
    def deployDirectory = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].targetDir
    def executionPort = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].bbeegPort
    def visioRootUrl = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].visioEegRootUrl
    def contentFileRepository = ENV_PROPERTIES[System.properties[TARGET_ENV_SYS_PROPERTY]].contentFileRepository

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 2224,
		command: """kill -9 \$(cat "${deployDirectory}/bbeeg.pid")""", trust: true, failonerror: false)
    // TODO: pass the http port here...
    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 2224,
		command: """/usr/lib/jvm/jdk1.7.0/jre/bin/java -Dfile.encoding=UTF-8 -jar "${deployDirectory}/bbeeg.jar" \
		    -httpPort ${executionPort} -visioRootUrl ${visioRootUrl} -contentFileRepository ${contentFileRepository} \
		    > "${deployDirectory}/bbeeg.log" 2> "${deployDirectory}/bbeeg.err.log" \
		    & echo \$! > "${deployDirectory}/bbeeg.pid" """,
        trust: true, failonerror: true)
}

task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
}

task initializeIntTestContext << {
    ant.echo "TODO: unzip & start elastic search here !"
}
intTestClasses.dependsOn initializeIntTestContext

// For cobertura ...
if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY))) {
    gradle.taskGraph.beforeTask { task ->
        if (task == test) {
            ant {
                // delete data file for cobertura, otherwise coverage would be added
                delete(file: cobSerFile, failonerror: false)
                // delete copy of original classes
                delete(dir: srcCopy, failonerror: false)
                // import cobertura task, so it is available in the script
                taskdef(resource: 'tasks.properties', classpath: configurations.testRuntime.asPath)
                // create copy (backup) of original class files
                copy(todir: srcCopy) {
                    fileset(dir: srcOriginal)
                }
                // instrument the relevant classes in-place
                'cobertura-instrument'(datafile: cobSerFile) {
                    fileset(dir: srcOriginal,
                            includes: "**/*.class")
                }
            }
        }
    }

    gradle.taskGraph.afterTask { task ->
        if (task == test && new File(srcCopy).exists()) {
            // replace instrumented classes with backup copy again
            ant {
                delete(file: srcOriginal)
                move(file: srcCopy,
                        tofile: srcOriginal)
            }
            // create cobertura reports
            ant.'cobertura-report'(destdir: "${project.buildDirName}/reports/tests/",
                    format: 'xml', srcdir: "src/main/java", datafile: cobSerFile)
        }
    }

    test {
        ignoreFailures = true
        systemProperties["net.sourceforge.cobertura.datafile"] = cobSerFile
    }
}

sonar {
    serverUrl = "http://sonar.4sh.fr"

    globalProperty "sonar.jdbc.url", "jdbc:mysql://sonar:3306/sonar"
    globalProperty "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    globalProperty "sonar.jdbc.username", "sonar"
    globalProperty "sonar.jdbc.password", "4SHsoar"

    globalProperty "sonar.java.source", "1.7"
    globalProperty "sonar.java.target", "1.7"
}