if (!hasProperty("releasesRepoUsername")
        || !hasProperty("releasesRepoPassword")) {
    ant.fail "You should define a ~/.gradle/gradle.properties containing properties 'releasesRepoUsername' and 'releasesRepoPassword' to access 4SH releases repository !"
}

// For gradle release
apply from: "https://launchpad.net/gradle-release/trunk/1.0/+download/apply.groovy"

task wrapper(type: Wrapper) {
    gradleVersion = '1.2'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'sonar'
    apply plugin: 'maven'

    // For cobertura
    def cobSerFile = "${project.buildDir}/reports/tests/cobertura.ser"
    def srcOriginal = "${sourceSets.main.output.classesDir}"
    def srcCopy = "${srcOriginal}-copy"
    def COVERAGE_SYS_PROPERTY = "test.coverage.activated"
    // Sysprop allowing to ignore test failures during the build
    def IGNORE_TEST_FAILURES_SYS_PROPERTY = "test.ignore.failures";

    group = "fr.4sh.jewas"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    if (System.getProperty("jdk") != null) {
        sourceCompatibility = System.getProperty("jdk")
        targetCompatibility = System.getProperty("jdk")
    }

    test {
        ignoreFailures = "true".equalsIgnoreCase(System.getProperty(IGNORE_TEST_FAILURES_SYS_PROPERTY))
    }

    configurations {
        deployerJars
    }

    repositories {
        maven {
            credentials {
                username releasesRepoUsername
                password releasesRepoPassword
            }
            url "http://repo.4sh.fr/libs/"
            artifactUrls "http://repo.4sh.fr/libs/"
        }
    }

    task packageJavadoc(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task packageSources(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    artifacts {
        archives(packageJavadoc) {
            type = 'javadoc'
            extension = 'jar'
        }
        archives(packageSources)
    }

    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            snapshotRepository(url: "http://repo.4sh.fr/libs-snapshot-local") {
                authentication(userName: releasesRepoUsername, password: releasesRepoPassword)
            }
            repository(url: "http://repo.4sh.fr/libs-release-local/") {
                authentication(userName: releasesRepoUsername, password: releasesRepoPassword)
            }
        }
    }

    release {
        // Hack allowing to skip the "next version" prompt
        project.setProperty("gradle.release.useAutomaticVersion", "true");
        // Define here custom commit messages
        newVersionCommitMessage = "Re-snapshoted project to version "
        preTagCommitMessage = "Preparing version for release "
        tagCommitMessage = "Tag for version "
    }
    createReleaseTag.dependsOn uploadArchives

    // Allows to generate USER_HOME idea variable uniformely on every OS
    idea {
        pathVariables("USER_HOME": file(System.getProperty("user.home")))
    }

    // For cobertura ...
    if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY))) {
        gradle.taskGraph.beforeTask { task ->
            if (task == test) {
                ant {
                    // delete data file for cobertura, otherwise coverage would be added
                    delete(file: cobSerFile, failonerror: false)
                    // delete copy of original classes
                    delete(dir: srcCopy, failonerror: false)
                    // import cobertura task, so it is available in the script
                    taskdef(resource: 'tasks.properties', classpath: configurations.testRuntime.asPath)
                    // create copy (backup) of original class files
                    copy(todir: srcCopy) {
                        fileset(dir: srcOriginal)
                    }
                    // instrument the relevant classes in-place
                    'cobertura-instrument'(datafile: cobSerFile) {
                        fileset(dir: srcOriginal,
                                includes: "**/*.class")
                    }
                }
            }
        }

        gradle.taskGraph.afterTask { task ->
            if (task == test && new File(srcCopy).exists()) {
                // replace instrumented classes with backup copy again
                ant {
                    delete(file: srcOriginal)
                    move(file: srcCopy,
                            tofile: srcOriginal)
                }
                // create cobertura reports
                ant.'cobertura-report'(destdir: "${project.buildDirName}/reports/tests/",
                        format: 'xml', srcdir: "src/main/java", datafile: cobSerFile)
            }
        }

        test {
            ignoreFailures = true
            systemProperties["net.sourceforge.cobertura.datafile"] = cobSerFile
        }
    }
}
