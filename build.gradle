apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'sonar'

// For cobertura
def cobSerFile = "${project.buildDir}/reports/tests/cobertura.ser"
def srcOriginal = "${sourceSets.main.classesDir}"
def srcCopy = "${srcOriginal}-copy"
def COVERAGE_SYS_PROPERTY = "test.coverage.activated"


repositories {
    mavenCentral()
}


dependencies {
    compile(
            [group: "freemarker", name: 'freemarker', version: '2.3.9', transitive: true],
            [group: 'com.google.code.gson', name: 'gson', version: '1.7.1', transitive: true],
            [group: 'joda-time', name: 'joda-time', version: '1.6.2', transitive: true],
            //[group: "com.google.guava", name: 'guava', version: 'r09', transitive: true],
            // TODO: when released, prefer depending on a released netty version instead
            // of git cloning it into libs/netty
            // Note: the dependency is still there since we need netty 3.2.4 transitive deps
            // to compile checkouted sources
            //[group: "org.jboss.netty", name: 'netty', version: '3.2.4.Final', transitive: true],
            // TODO: Dependencies extracted from netty's pom.xml since these dependencies
            // are optional (and thus, not retrieved via the transitive dependencies mecanism)
            // These dependencies should be removed when we will gather the netty-4.0.0.jar file
            /*            [group: 'javax.servlet', name: 'servlet-api', version: '2.5', transitive: true],
    [group: 'org.rxtx', name: 'rxtx', version: '2.1.7', transitive: true],
    [group: 'com.google.protobuf', name: 'protobuf-java', version: '2.3.0', transitive: true],
    [group: 'org.apache.felix', name: 'org.osgi.core', version: '1.4.0', transitive: true],
            */
            // Never change the transitivity of this dependency : it would pull the
            // org.apache.felix:org.osgi.foundation:1.2.0 which reimplement rt.jar
            // It will fail the tests with a "IllegalArgumentException: superClassName is empty!"
            //[group: 'org.apache.felix', name: 'org.osgi.compendium', version: '1.4.0', transitive: false],
            [group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1', transitive: true],
            /*[group: 'commons-logging', name: 'commons-logging', version: '1.1.1', transitive: true],
            [group: 'org.jboss.logging', name: 'jboss-logging-spi', version: '2.1.2.GA', transitive: true],
            [group: 'log4j', name: 'log4j', version: '1.2.16', transitive: true]*/
    )
    testCompile(
            [group: 'junit', name: 'junit', version: '4.8.2', transitive: true],
            [group: 'com.jayway.restassured', name: 'rest-assured', version: '1.2.1'],
            [group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'],
            [group: 'com.h2database', name: 'h2', version: '1.3.158']
    )
    testRuntime 'net.sourceforge.cobertura:cobertura:1.9.3'
}

// This task will be useless when we will depend on netty 4.0.0 released version
task init_cloned_sources << {
    description = "Initialize needed sources to compile into workspace"
    def checkoutNetty = "git clone git@github.com:4sh/netty.git libs/netty/"
    def proc = checkoutNetty.execute()
}
compileJava.dependsOn init_cloned_sources


task clean_netty_sources << {
    ant.delete(dir: "libs/netty/", failonerror: false)
}
clean.dependsOn clean_netty_sources

// This sourceSet will be useless when we will depend on netty 4.0.0 released version
sourceSets {
    nettySrc {
        java {
            srcDirs("libs/netty/src/main/java")
        }
    }
    main {
        compileClasspath = sourceSets.nettySrc.classes + configurations.compile
        runtimeClasspath = classes + sourceSets.nettySrc.classes + configurations.runtime
    }
    test {
        compileClasspath = sourceSets.nettySrc.classes + sourceSets.main.classes + configurations.testCompile
        runtimeClasspath = classes + sourceSets.nettySrc.classes + sourceSets.main.classes + configurations.testRuntime
    }
}

// For cobertura ...
gradle.taskGraph.beforeTask { task ->
    if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY)) && task == test) {
        ant {
            // delete data file for cobertura, otherwise coverage would be added
            delete(file: cobSerFile, failonerror: false)
            // delete copy of original classes
            delete(dir: srcCopy, failonerror: false)
            // import cobertura task, so it is available in the script
            taskdef(resource: 'tasks.properties', classpath: configurations.testRuntime.asPath)
            // create copy (backup) of original class files
            copy(todir: srcCopy) {
                fileset(dir: srcOriginal)
            }
            // instrument the relevant classes in-place
            'cobertura-instrument'(datafile: cobSerFile) {
                fileset(dir: srcOriginal,
                        includes: "jewas/**/*.class",
                        excludes: "**/*Test.class")
            }
        }
    }
}

gradle.taskGraph.afterTask { task ->
    if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY)) && task == test) {
        if (new File(srcCopy).exists()) {
            // replace instrumented classes with backup copy again
            ant {
                delete(file: srcOriginal)
                move(file: srcCopy,
                        tofile: srcOriginal)
            }
            // create cobertura reports
            ant.'cobertura-report'(destdir: "${project.buildDirName}/reports/tests/",
                    format: 'xml', srcdir: "src/main/java", datafile: cobSerFile)
        }
    }
}

test {
    // For cobertura
    if ("true".equals(System.getProperty(COVERAGE_SYS_PROPERTY))) {
        ignoreFailures = true
        options {
            jvmArgs << "-Dnet.sourceforge.cobertura.datafile=${cobSerFile}"
        }
    }
}

sonar {
    serverUrl = "http://sonar.4sh.fr"

    globalProperty "sonar.jdbc.url", "jdbc:mysql://sonar:3306/sonar"
    globalProperty "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
    globalProperty "sonar.jdbc.username", "sonar"
    globalProperty "sonar.jdbc.password", "4SHsoar"
}
